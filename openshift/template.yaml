apiVersion: v1
kind: Template
metadata:
  name: assisted-events-scrape
objects:
# Assisted events scrape k8s manifests
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: assisted-events-scrape
  spec:
    selector:
      matchLabels:
        app: assisted-events-scrape
    replicas: ${{REPLICAS_COUNT}}
    template:
      metadata:
        labels:
          app: assisted-events-scrape
      spec:
        serviceAccountName: assisted-service
        containers:
        - name: assisted-events-scrape
          image: ${IMAGE_NAME}:${IMAGE_TAG}
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 500m
              memory: 2000Mi
            requests:
              cpu: 300m
              memory: 400Mi
          envFrom:
            - secretRef:
                name: events-scrape
          env:
          - name: SENTRY_DSN
            value: ${SENTRY_DSN}
          - name: MAX_IDLE_MINUTES
            value: ${MAX_IDLE_MINUTES}
          - name: ERRORS_BEFORE_RESTART
            value: ${ERRORS_BEFORE_RESTART}
          - name: ES_SERVER
            valueFrom:
              secretKeyRef:
                key: endpoint
                name: assisted-installer-elasticsearch
          - name: ES_INDEX
            value: ${ES_INDEX}
          - name: ES_USER
            valueFrom:
              secretKeyRef:
                key: master_user_name
                name: elastic-master-credentials
          - name: ES_PASS
            valueFrom:
              secretKeyRef:
                key: master_user_password
                name: elastic-master-credentials

- apiVersion: policy/v1
  kind: PodDisruptionBudget
  metadata:
    labels:
      app: assisted-events-scrape
    name: assisted-events-scrape
  spec:
    minAvailable: 1
    selector:
      matchLabels:
        app: assisted-events-scrape
# Kibana manifests
# Using service account as an Oauth client. read https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html/authentication/using-service-accounts-as-oauth-client
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      # Ensuring the redirect url will be the kibana route
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"kibana-proxy"}}'
    name: kibana-proxy
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kibana-proxy
    name: kibana-proxy
  spec:
    ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: kibana
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: kibana
    labels:
      app: kibana
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kibana
    template:
      metadata:
        labels:
          app: kibana
      spec:
        serviceAccountName: kibana-proxy
        containers:
        - name: kibana-proxy
          image: ${OAUTH_IMAGE}:${OAUTH_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 3000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 100Mi
          args:
          - --http-address=0.0.0.0:3000
          - --provider=openshift
          - --openshift-service-account=kibana-proxy
          - --upstream=$(KIBANA_ENDPOINT)
          - --https-address=
          - --pass-basic-auth=false
          - --openshift-sar={"namespace":"$(NAMESPACE)","resource":"services","name":"kibana-proxy","verb":"get"}
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KIBANA_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: kibana_endpoint
                name: assisted-installer-elasticsearch
          - name: OAUTH2_PROXY_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                key: session_secret
                name: kibana-oauth-application
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: load-historical-data
    labels:
      app: import-migration
  spec:
    template:
      spec:
        containers:
        - name: elastic-dump
          image: elasticdump/elasticsearch-dump:v6.81.0
          command:
          - "bash"
          args:
          - "-c"
          - "export ELASTIC_AUTH_HEADERS=$(/tmp/generate_auth_headers); elasticdump --s3AccessKeyId $(AWS_ACCESS_KEY_ID) --s3SecretAccessKey $(AWS_SECRET_ACCESS_KEY) --input=s3://$(AWS_S3_BUCKET)/migration_$(MIGRATION_INDEX).json --output=\"$(ELASTIC_HOST)/restored_${MIGRATION_INDEX}\" --output-headers=\"${ELASTIC_AUTH_HEADERS}\" --concurrency=20 --limit=250 --debug=true"
          env:
          - name: ELASTIC_HOST
            valueFrom:
              secretKeyRef:
                key: endpoint
                name: assisted-installer-elasticsearch
          - name: MIGRATION_INDEX
            value: ${MIGRATION_INDEX}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: assisted-installer-s3-migration
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: assisted-installer-s3-migration
          - name: AWS_S3_BUCKET
            valueFrom:
              secretKeyRef:
                key: bucket
                name: assisted-installer-s3-migration
          - name: ELASTIC_USER
            valueFrom:
              secretKeyRef:
                key: master_user_name
                name: elastic-master-credentials
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: master_user_password
                name: elastic-master-credentials
          volumeMounts:
          - mountPath: /tmp
            name: migration-scripts
        restartPolicy: Never
        volumes:
        - configMap:
            defaultMode: 0770
            name: migration-scripts
          name: migration-scripts
    backoffLimit: 1
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: migration-scripts
    namespace: assisted-installer-integration
  data:
    generate_auth_headers: |-
      #!/bin/bash
      base64_credentials=$(echo -n "${ELASTIC_USER}:${ELASTIC_PASSWORD}" | base64 -w0)
      echo -n '{"Authorization": "Basic '${base64_credentials}'"}'

parameters:
- name: IMAGE_NAME
  value: quay.io/app-sre/assisted-events-scrape
- name: IMAGE_TAG
  value: ''
  required: true
- name: REPLICAS_COUNT
  value: "1"
- name: ES_INDEX
  value: ''
- name: OAUTH_IMAGE
  value: quay.io/openshift/origin-oauth-proxy
- name: OAUTH_IMAGE_TAG
  value: 4.4.0
- name: SENTRY_DSN
  value: ''
- name: MAX_IDLE_MINUTES
  value: '120'
- name: ERRORS_BEFORE_RESTART
  value: '100'
- name: MIGRATION_INDEX
  value: "assisted-service-events"
