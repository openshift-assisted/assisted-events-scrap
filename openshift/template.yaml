apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: assisted-events-scrape
objects:
# Assisted events scrape k8s manifests
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: assisted-events-scrape
  spec:
    selector:
      matchLabels:
        app: assisted-events-scrape
    replicas: ${{REPLICAS_COUNT}}
    template:
      metadata:
        labels:
          app: assisted-events-scrape
      spec:
        serviceAccountName: assisted-service
        containers:
        - name: assisted-events-scrape
          image: ${IMAGE_NAME}:${IMAGE_TAG}
          imagePullPolicy: ${IMAGE_PULL_POLICY}
          resources:
            limits:
              cpu: 500m
              memory: 2000Mi
            requests:
              cpu: 300m
              memory: 400Mi
          envFrom:
            - secretRef:
                name: events-scrape
          env:
          - name: SENTRY_DSN
            value: "${SENTRY_DSN}"
          - name: SENTRY_RELEASE
            value: "${IMAGE_TAG}"
          - name: MAX_IDLE_MINUTES
            value: "${MAX_IDLE_MINUTES}"
          - name: ERRORS_BEFORE_RESTART
            value: "${ERRORS_BEFORE_RESTART}"
          - name: N_WORKERS
            value: "${N_WORKERS}"
          - name: LOGLEVEL
            value: "${LOGLEVEL}"
          - name: ES_SERVER
            valueFrom:
              secretKeyRef:
                key: endpoint
                name: assisted-installer-elasticsearch
          - name: ES_INDEX
            value: "${ES_INDEX}"
          - name: ES_USER
            valueFrom:
              secretKeyRef:
                key: master_user_name
                name: elastic-master-credentials
          - name: ES_PASS
            valueFrom:
              secretKeyRef:
                key: master_user_password
                name: elastic-master-credentials
# Kibana manifests
# Using service account as an Oauth client. read https://access.redhat.com/documentation/en-us/openshift_container_platform/4.2/html/authentication/using-service-accounts-as-oauth-client
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      # Ensuring the redirect url will be the kibana route
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"kibana-proxy"}}'
    name: kibana-proxy
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kibana-proxy
    name: kibana-proxy
  spec:
    ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: kibana
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: kibana
    labels:
      app: kibana
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: kibana
    template:
      metadata:
        labels:
          app: kibana
      spec:
        serviceAccountName: kibana-proxy
        containers:
        - name: kibana-proxy
          image: ${OAUTH_IMAGE}:${OAUTH_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 3000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 100Mi
          args:
          - --http-address=0.0.0.0:3000
          - --provider=openshift
          - --openshift-service-account=kibana-proxy
          - --upstream=$(ENDPOINT)
          - --https-address=
          - --pass-basic-auth=false
          - --openshift-sar={"namespace":"$(NAMESPACE)","resource":"services","name":"kibana-proxy","verb":"get"}
          - --htpasswd-file=/etc/oauth-proxy/htpasswd
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ENDPOINT
            valueFrom:
              secretKeyRef:
                key: endpoint
                name: assisted-installer-elasticsearch
          - name: OAUTH2_PROXY_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                key: session_secret
                name: kibana-oauth-application
          volumeMounts:
          - mountPath: /etc/oauth-proxy/
            name: oauth-proxy-htpasswd
            readOnly: true
        volumes:
        - name: oauth-proxy-htpasswd
          secret:
            defaultMode: 420
            optional: false
            secretName: kibana-oauth-application
            items:
            - key: htpasswd
              path: htpasswd
- apiVersion: batch/v1
  kind: CronJob
  metadata:
    name: ccx-export
  spec:
    schedule: "0 2 * * *"
    jobTemplate:
      spec:
        ttlSecondsAfterFinished: 600
        template:
          spec:
            containers:
            - name: ccx-s3-export
              image: ${IMAGE_NAME}:${IMAGE_TAG}
              imagePullPolicy: ${IMAGE_PULL_POLICY}
              command:
              - ccx_export
              env:
              - name: EVENT_EXPORT_STREAM_CHUNK_SIZE
                value: ${EVENT_EXPORT_STREAM_CHUNK_SIZE}
              - name: AWS_S3_BUCKET
                valueFrom:
                  secretKeyRef:
                    key: bucket
                    name: ${AWS_S3_SECRET_NAME}
              - name: AWS_S3_ENDPOINT
                valueFrom:
                  secretKeyRef:
                    key: endpoint
                    name: ${AWS_S3_SECRET_NAME}
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    key: aws_access_key_id
                    name: ${AWS_S3_SECRET_NAME}
              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    key: aws_secret_access_key
                    name: ${AWS_S3_SECRET_NAME}
              - name: ES_SERVER
                valueFrom:
                  secretKeyRef:
                    key: endpoint
                    name: assisted-installer-elasticsearch
              - name: ES_USER
                valueFrom:
                  secretKeyRef:
                    key: master_user_name
                    name: elastic-master-credentials
              - name: ES_PASS
                valueFrom:
                  secretKeyRef:
                    key: master_user_password
                    name: elastic-master-credentials
            restartPolicy: OnFailure
parameters:
- name: IMAGE_NAME
  value: quay.io/app-sre/assisted-events-scrape
- name: IMAGE_TAG
  value: ''
  required: true
- name: REPLICAS_COUNT
  value: "1"
- name: ES_INDEX
  value: 'assisted-service-events'
- name: OAUTH_IMAGE
  value: quay.io/openshift/origin-oauth-proxy
- name: OAUTH_IMAGE_TAG
  value: 4.4.0
- name: SENTRY_DSN
  value: ''
- name: MAX_IDLE_MINUTES
  value: '120'
- name: ERRORS_BEFORE_RESTART
  value: '10000'
- name: N_WORKERS
  value: '5'
- name: LOGLEVEL
  value: 'INFO'
- name: IMAGE_PULL_POLICY
  value: 'Always'
- name: AWS_S3_SECRET_NAME
  value: 'ai-ccx-integration'
- name: EVENT_EXPORT_STREAM_CHUNK_SIZE
  value: "1000"
